/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Chapter extends Parsable {
    /**
     * The characters property
     */
    characters?: Character[];
    /**
     * The description property
     */
    description?: string;
    /**
     * The name property
     */
    name?: string;
    /**
     * The scenes property
     */
    scenes?: Scene[];
    /**
     * The settings property
     */
    settings?: Setting[];
}
export interface Character extends Parsable {
    /**
     * The description property
     */
    description?: string;
    /**
     * The name property
     */
    name?: string;
}
export function createChapterFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoChapter;
}
export function createCharacterFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCharacter;
}
export function createOutlineFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoOutline;
}
export function createSceneFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoScene;
}
export function createSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSetting;
}
export function deserializeIntoChapter(chapter: Chapter | undefined = {} as Chapter) : Record<string, (node: ParseNode) => void> {
    return {
        "characters": n => { chapter.characters = n.getCollectionOfObjectValues<Character>(createCharacterFromDiscriminatorValue); },
        "description": n => { chapter.description = n.getStringValue(); },
        "name": n => { chapter.name = n.getStringValue(); },
        "scenes": n => { chapter.scenes = n.getCollectionOfObjectValues<Scene>(createSceneFromDiscriminatorValue); },
        "settings": n => { chapter.settings = n.getCollectionOfObjectValues<Setting>(createSettingFromDiscriminatorValue); },
    }
}
export function deserializeIntoCharacter(character: Character | undefined = {} as Character) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { character.description = n.getStringValue(); },
        "name": n => { character.name = n.getStringValue(); },
    }
}
export function deserializeIntoOutline(outline: Outline | undefined = {} as Outline) : Record<string, (node: ParseNode) => void> {
    return {
        "chapters": n => { outline.chapters = n.getCollectionOfObjectValues<Chapter>(createChapterFromDiscriminatorValue); },
        "characters": n => { outline.characters = n.getCollectionOfObjectValues<Character>(createCharacterFromDiscriminatorValue); },
        "description": n => { outline.description = n.getStringValue(); },
        "name": n => { outline.name = n.getStringValue(); },
        "settings": n => { outline.settings = n.getCollectionOfObjectValues<Setting>(createSettingFromDiscriminatorValue); },
    }
}
export function deserializeIntoScene(scene: Scene | undefined = {} as Scene) : Record<string, (node: ParseNode) => void> {
    return {
        "characters": n => { scene.characters = n.getCollectionOfObjectValues<Character>(createCharacterFromDiscriminatorValue); },
        "content": n => { scene.content = n.getStringValue(); },
        "description": n => { scene.description = n.getStringValue(); },
        "name": n => { scene.name = n.getStringValue(); },
        "settings": n => { scene.settings = n.getCollectionOfObjectValues<Setting>(createSettingFromDiscriminatorValue); },
    }
}
export function deserializeIntoSetting(setting: Setting | undefined = {} as Setting) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { setting.description = n.getStringValue(); },
        "name": n => { setting.name = n.getStringValue(); },
    }
}
export interface Outline extends Parsable {
    /**
     * The chapters property
     */
    chapters?: Chapter[];
    /**
     * The characters property
     */
    characters?: Character[];
    /**
     * The description property
     */
    description?: string;
    /**
     * The name property
     */
    name?: string;
    /**
     * The settings property
     */
    settings?: Setting[];
}
export interface Scene extends Parsable {
    /**
     * The characters property
     */
    characters?: Character[];
    /**
     * The content property
     */
    content?: string;
    /**
     * The description property
     */
    description?: string;
    /**
     * The name property
     */
    name?: string;
    /**
     * The settings property
     */
    settings?: Setting[];
}
export function serializeChapter(writer: SerializationWriter, chapter: Chapter | undefined = {} as Chapter) : void {
    writer.writeCollectionOfObjectValues<Character>("characters", chapter.characters, serializeCharacter);
    writer.writeStringValue("description", chapter.description);
    writer.writeStringValue("name", chapter.name);
    writer.writeCollectionOfObjectValues<Scene>("scenes", chapter.scenes, serializeScene);
    writer.writeCollectionOfObjectValues<Setting>("settings", chapter.settings, serializeSetting);
}
export function serializeCharacter(writer: SerializationWriter, character: Character | undefined = {} as Character) : void {
    writer.writeStringValue("description", character.description);
    writer.writeStringValue("name", character.name);
}
export function serializeOutline(writer: SerializationWriter, outline: Outline | undefined = {} as Outline) : void {
    writer.writeCollectionOfObjectValues<Chapter>("chapters", outline.chapters, serializeChapter);
    writer.writeCollectionOfObjectValues<Character>("characters", outline.characters, serializeCharacter);
    writer.writeStringValue("description", outline.description);
    writer.writeStringValue("name", outline.name);
    writer.writeCollectionOfObjectValues<Setting>("settings", outline.settings, serializeSetting);
}
export function serializeScene(writer: SerializationWriter, scene: Scene | undefined = {} as Scene) : void {
    writer.writeCollectionOfObjectValues<Character>("characters", scene.characters, serializeCharacter);
    writer.writeStringValue("content", scene.content);
    writer.writeStringValue("description", scene.description);
    writer.writeStringValue("name", scene.name);
    writer.writeCollectionOfObjectValues<Setting>("settings", scene.settings, serializeSetting);
}
export function serializeSetting(writer: SerializationWriter, setting: Setting | undefined = {} as Setting) : void {
    writer.writeStringValue("description", setting.description);
    writer.writeStringValue("name", setting.name);
}
export interface Setting extends Parsable {
    /**
     * The description property
     */
    description?: string;
    /**
     * The name property
     */
    name?: string;
}
/* tslint:enable */
/* eslint-enable */
